using Live.MagicAuth.Domain.Shared;

namespace Live.MagicAuth.Domain.Credentials
{
    /// <summary>
    /// Represents a credential
    /// </summary>
    public class Credential : BaseEntity
    {
        /// <summary>
        /// Gets or sets the customer identifer
        /// </summary>
        public byte[] CustomerId { get; set; }

        /// <summary>
        /// Gets or sets a descriptor object that contains the credential ID and the type (public-key), along with optional transports.
        /// Used during authentication to identify which credential the client should use.
        /// </summary>
        public string Descriptor { get; set; }

        /// <summary>
        /// Gets or sets the actual public key generated by the authenticator and returned during registration
        /// </summary>
        public byte[] PublicKey { get; set; }

        /// <summary>
        /// Gets or sets a user handle is an opaque, stable, unique identifier for the user provided to the client during registration and login.
        /// Enables "discoverable credentials" (formerly known as "resident keys") — allowing logins without a username.
        /// </summary>
        public byte[] UserHandle { get; set; }

        /// <summary>
        /// Gets or sets a counter maintained by the authenticator and incremented with each signature. Helps detect cloned authenticators — if the counter is ever lower than the last known value, the credential may be compromised.
        /// </summary>
        public uint SignatureCounter { get; set; }

        /// <summary>
        /// Gets or sets the type of credential. Usually "public-key".
        /// </summary>
        public string CredType { get; set; }

        /// <summary>
        /// Gets or sets the registration date and time
        /// </summary>
        public DateTime RegDate { get; set; }

        /// <summary>
        /// Gets or sets the Authenticator Attestation GUID
        /// </summary>
        public Guid AaGuid { get; set; }
    }
}
